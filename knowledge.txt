/*

The useReducer Hook is similar to useState and is employed to manage state in complex scenarios such as CRUD operations. With useReducer, we can efficiently handle state changes within a component by specifying how actions should modify the state. Unlike useState, useReducer allows for more complex state management, making it a useful choice for handling state in scenarios where multiple components need access to the same state and actions. While it provides similar functionality to Redux in terms of state management, it is primarily designed for managing state within a single component or a few related components, whereas Redux is generally used for managing global state across an entire application."

*/



/*

The useContext hook in React is different from useState and useReducer. It's primarily used to access the value of a context that has been created using the createContext function. While useState and useReducer manage component-level state, useContext focuses on consuming values provided by a context at any level of the component tree.

Unlike useReducer, useContext itself does not handle state changes or support actions for complex scenarios like CRUD operations. Instead, it allows components to access values from a context created by createContext, eliminating the need to pass props manually through every level of the component tree.

Similarly, useContext and createContext are not primarily designed for global state management. They are effective for sharing specific data within a subtree of components but aren't optimized for managing application-wide state changes. 

It helps in avoiding the tedious process of passing props through multiple layers of components by directly providing access to shared data or functions.

Redux is powerful for managing global state across an entire application, enforcing strict patterns for state management, while createContext in React is more lightweight and focused on sharing data within a specific subtree of components, offering simplicity and flexibility but not intended for global state management. Choosing between them depends on the scale and complexity of state management required in your application.

*/



/*

useMemo - to improve the performance of our component.
- It allows us to hold the result of some function in cache and now whenever our function execute with same set of parameter instead of executing it again we get the result from cache.
- In react two hooks are designed for memoization : useMemo & useCallback

# Problem - If in a component one state gets changed than that state will rerendered all the state in its component. To avoid this unncessary rendering we use useMemo.

*/



/*

Problem - Whenever a state in parent component gets updated automatically the parent component along with its Child component gets re-rendered. To prevent the child component from getting rerendered we use:

export default memo(Child);

This prevent Child component re-render.

*/